!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).algoliasearch={})}(this,function(e){"use strict";function d(){return{send:function(s){return new Promise(t=>{let a=new XMLHttpRequest,e=(a.open(s.method,s.url,!0),Object.keys(s.headers).forEach(e=>a.setRequestHeader(e,s.headers[e])),(e,r)=>setTimeout(()=>{a.abort(),t({status:0,content:r,isTimedOut:!0})},e)),r=e(s.connectTimeout,"Connection timeout"),i;a.onreadystatechange=()=>{a.readyState>a.OPENED&&void 0===i&&(clearTimeout(r),i=e(s.responseTimeout,"Socket timeout"))},a.onerror=()=>{0===a.status&&(clearTimeout(r),clearTimeout(i),t({content:a.responseText||"Network request failed",status:a.status,isTimedOut:!1}))},a.onload=()=>{clearTimeout(r),clearTimeout(i),t({content:a.responseText,status:a.status,isTimedOut:!1})},a.send(s.data)})}}}function h(a){let e,i="algolia-client-js-"+a.key;function s(){return e=void 0===e?a.localStorage||window.localStorage:e}function n(){return JSON.parse(s().getItem(i)||"{}")}function o(e){s().setItem(i,JSON.stringify(e))}return{get(e,r,t={miss:()=>Promise.resolve()}){return Promise.resolve().then(()=>{{let t=a.timeToLive?1e3*a.timeToLive:null,e=n(),r=Object.fromEntries(Object.entries(e).filter(([,e])=>void 0!==e.timestamp));o(r),t&&o(Object.fromEntries(Object.entries(r).filter(([,e])=>{var r=(new Date).getTime();return!(e.timestamp+t<r)})))}return n()[JSON.stringify(e)]}).then(e=>Promise.all([e?e.value:r(),void 0!==e])).then(([e,r])=>Promise.all([e,r||t.miss(e)])).then(([e])=>e)},set(r,t){return Promise.resolve().then(()=>{let e=n();return e[JSON.stringify(r)]={timestamp:(new Date).getTime(),value:t},s().setItem(i,JSON.stringify(e)),t})},delete(r){return Promise.resolve().then(()=>{let e=n();delete e[JSON.stringify(r)],s().setItem(i,JSON.stringify(e))})},clear(){return Promise.resolve().then(()=>{s().removeItem(i)})}}}function u(e){let a=[...e.caches],i=a.shift();return void 0===i?{get(e,r,t={miss:()=>Promise.resolve()}){return r().then(e=>Promise.all([e,t.miss(e)])).then(([e])=>e)},set(e,r){return Promise.resolve(r)},delete(e){return Promise.resolve()},clear(){return Promise.resolve()}}:{get(e,r,t={miss:()=>Promise.resolve()}){return i.get(e,r,t).catch(()=>u({caches:a}).get(e,r,t))},set(e,r){return i.set(e,r).catch(()=>u({caches:a}).set(e,r))},delete(e){return i.delete(e).catch(()=>u({caches:a}).delete(e))},clear(){return i.clear().catch(()=>u({caches:a}).clear())}}}function c(i={serializable:!0}){let s={};return{get(e,r,t={miss:()=>Promise.resolve()}){e=JSON.stringify(e);if(e in s)return Promise.resolve(i.serializable?JSON.parse(s[e]):s[e]);let a=r();return a.then(e=>t.miss(e)).then(()=>a)},set(e,r){return s[JSON.stringify(e)]=i.serializable?JSON.stringify(r):r,Promise.resolve(r)},delete(e){return delete s[JSON.stringify(e)],Promise.resolve()},clear(){return s={},Promise.resolve()}}}function p(e,r,t="WithinHeaders"){let a={"x-algolia-api-key":r,"x-algolia-application-id":e};return{headers(){return"WithinHeaders"===t?a:{}},queryParameters(){return"WithinQueryParameters"===t?a:{}}}}function g({func:a,validate:i,aggregator:s,error:n,timeout:o=()=>0}){let d=e=>new Promise((r,t)=>{a(e).then(async e=>(s&&await s(e),await i(e)?r(e):n&&await n.validate(e)?t(new Error(await n.message(e))):setTimeout(()=>{d(e).then(r).catch(t)},await o()))).catch(e=>{t(e)})});return d()}function w({algoliaAgents:e,client:r,version:t}){let a=function(e){let r={value:`Algolia for JavaScript (${e})`,add(e){e="; "+e.segment+(void 0!==e.version?` (${e.version})`:"");return-1===r.value.indexOf(e)&&(r.value=r.value+e),r}};return r}(t).add({segment:r,version:t});return e.forEach(e=>a.add(e)),a}function P(){return{debug(e,r){return Promise.resolve()},info(e,r){return Promise.resolve()},error(e,r){return Promise.resolve()}}}function T(e,r="up"){let t=Date.now();return{...e,status:r,lastUpdate:t,isUp:function(){return"up"===r||12e4<Date.now()-t},isTimedOut:function(){return"timed out"===r&&Date.now()-t<=12e4}}}var r=class extends Error{name="AlgoliaError";constructor(e,r){super(e),r&&(this.name=r)}},t=class extends r{stackTrace;constructor(e,r,t){super(e,t),this.stackTrace=r}},j=class extends t{constructor(e){super("Unreachable hosts - your application id may be incorrect. If the error persists, please visit our help center https://alg.li/support-unreachable-hosts or reach out to the Algolia Support team: https://alg.li/support",e,"RetryError")}},v=class extends t{status;constructor(e,r,t,a="ApiError"){super(e,t,a),this.status=r}},G=class extends r{response;constructor(e,r){super(e,"DeserializationError"),this.response=r}},B=class extends v{error;constructor(e,r,t,a){super(e,r,a,"DetailedApiError"),this.error=t}};function l(r){let t=r;for(let e=r.length-1;0<e;e--){var a=Math.floor(Math.random()*(e+1)),i=r[e];t[e]=r[a],t[a]=i}return t}function K(e,r,t){s=t;let a=Object.keys(s).filter(e=>void 0!==s[e]).sort().map(e=>e+"="+encodeURIComponent("[object Array]"===Object.prototype.toString.call(s[e])?s[e].join(","):s[e]).replace(/\+/g,"%20")).join("&"),i=`${e.protocol}://${e.url}${e.port?":"+e.port:""}/`+("/"===r.charAt(0)?r.substring(1):r);var s;return a.length&&(i+="?"+a),i}function D(e){var r=e.request.headers["x-algolia-api-key"]?{"x-algolia-api-key":"*****"}:{};return{...e,request:{...e.request,headers:{...e.request.headers,...r}}}}function q({hosts:i,hostsCache:y,baseHeaders:s,logger:f,baseQueryParameters:n,algoliaAgent:o,timeouts:E,requester:I,requestsCache:d,responsesCache:h}){async function u(u,c,l=!0){let m=[],p=function(e,r){if("GET"!==e.method&&(void 0!==e.data||void 0!==r.data))return e=Array.isArray(e.data)?e.data:{...e.data,...r.data},JSON.stringify(e)}(u,c),g=function(e,r,t){let a={Accept:"application/json",...e,...r,...t},i={};return Object.keys(a).forEach(e=>{var r=a[e];i[e.toLowerCase()]=r}),i}(s,u.headers,c.headers),e="GET"===u.method?{...u.data,...c.data}:{},w={...n,...u.queryParameters,...e};if(o.value&&(w["x-algolia-agent"]=o.value),c&&c.queryParameters)for(var r of Object.keys(c.queryParameters))c.queryParameters[r]&&"[object Object]"!==Object.prototype.toString.call(c.queryParameters[r])?w[r]=c.queryParameters[r].toString():w[r]=c.queryParameters[r];let P=0,q=async(r,e)=>{let t=r.pop();if(void 0===t)throw new j(m.map(e=>D(e)));var a,i;let s={...E,...c.timeouts},n={data:p,headers:g,method:u.method,url:K(t,u.path,w),connectTimeout:e(P,s.connect),responseTimeout:e(P,l?s.read:s.write)},o=e=>{e={request:n,response:e,host:t,triesLeft:r.length};return m.push(e),e},d=await I.send(n);if({isTimedOut:a,status:h}=[d][0],a||({isTimedOut:a,status:i}=[{isTimedOut:a,status:h}][0],!a&&0==~~i)||2!=~~(h/100)&&4!=~~(h/100))return a=o(d),d.isTimedOut&&P++,f.info("Retryable failure",D(a)),await y.set(t,T(t,d.isTimedOut?"timed out":"down")),q(r,e);if(i=d.status,2!=~~(i/100))throw o(d),function({content:e,status:r},t){try{var a=JSON.parse(e);return"error"in a?new B(a.message,r,a.error,t):new v(a.message,r,t)}catch{}return new v(e,r,t)}(d,m);var h=d;try{return JSON.parse(h.content)}catch(e){throw new G(e.message,h)}},t=i.filter(e=>"readWrite"===e.accept||(l?"read"===e.accept:"write"===e.accept)),a=await async function(e){let r=await Promise.all(e.map(e=>y.get(e,()=>Promise.resolve(T(e))))),t=r.filter(e=>e.isUp()),a=r.filter(e=>e.isTimedOut()),i=[...t,...a];return{hosts:0<i.length?i:e,getTimeout(e,r){return(0===a.length&&0===e?1:a.length+3+e)*r}}}(t);return q([...a.hosts].reverse(),a.getTimeout)}return{hostsCache:y,requester:I,timeouts:E,logger:f,algoliaAgent:o,baseHeaders:s,baseQueryParameters:n,hosts:i,request:function(e,r={}){var t=e.useReadTransporter||"GET"===e.method;if(!t)return u(e,r,t);let a=()=>u(e,r);if(!0!==(r.cacheable||e.cacheable))return a();let i={request:e,requestOptions:r,transporter:{queryParameters:n,headers:s}};return h.get(i,()=>d.get(i,()=>d.set(i,a()).then(e=>Promise.all([d.delete(i),e]),e=>Promise.all([d.delete(i),Promise.reject(e)])).then(([,e])=>e)),{miss:e=>h.set(i,e)})},requestsCache:d,responsesCache:h}}var m="1.5.0",o=["de","us"];function a(r,t,a,i){if(!r||"string"!=typeof r)throw new Error("`appId` is missing.");if(!t||"string"!=typeof t)throw new Error("`apiKey` is missing.");if(!a||"string"==typeof a&&o.includes(a)){var{appId:t,apiKey:a,authMode:s,algoliaAgents:r,region:i,...n}=[{appId:r,apiKey:t,region:a,timeouts:{connect:1e3,read:2e3,write:3e4},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:m+"-"+r}),c()]}),...i}][0];let e=p(t,a,s),o=q({hosts:[{url:(i=i)?"analytics.{region}.algolia.com".replace("{region}",i):"analytics.algolia.com",accept:"readWrite",protocol:"https"}],...n,algoliaAgent:w({algoliaAgents:r,client:"AbtestingV3",version:m}),baseHeaders:{"content-type":"text/plain",...e.headers(),...n.baseHeaders},baseQueryParameters:{...e.queryParameters(),...n.baseQueryParameters}});return{transporter:o,appId:t,apiKey:a,clearCache(){return Promise.all([o.requestsCache.clear(),o.responsesCache.clear()]).then(()=>{})},get _ua(){return o.algoliaAgent.value},addAlgoliaAgent(e,r){o.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){s&&"WithinHeaders"!==s?o.baseQueryParameters["x-algolia-api-key"]=e:o.baseHeaders["x-algolia-api-key"]=e},addABTests(e,r){if(!e)throw new Error("Parameter `addABTestsRequest` is required when calling `addABTests`.");if(!e.name)throw new Error("Parameter `addABTestsRequest.name` is required when calling `addABTests`.");if(!e.variants)throw new Error("Parameter `addABTestsRequest.variants` is required when calling `addABTests`.");if(!e.metrics)throw new Error("Parameter `addABTestsRequest.metrics` is required when calling `addABTests`.");if(!e.endAt)throw new Error("Parameter `addABTestsRequest.endAt` is required when calling `addABTests`.");e={method:"POST",path:"/3/abtests",queryParameters:{},headers:{},data:e};return o.request(e,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return o.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return o.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return o.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return o.request(e,a)},deleteABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `deleteABTest`.");e={method:"DELETE",path:"/3/abtests/{id}".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},estimateABTest(e,r){if(!e)throw new Error("Parameter `estimateABTestRequest` is required when calling `estimateABTest`.");if(!e.configuration)throw new Error("Parameter `estimateABTestRequest.configuration` is required when calling `estimateABTest`.");if(!e.variants)throw new Error("Parameter `estimateABTestRequest.variants` is required when calling `estimateABTest`.");e={method:"POST",path:"/3/abtests/estimate",queryParameters:{},headers:{},data:e};return o.request(e,r)},getABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `getABTest`.");e={method:"GET",path:"/3/abtests/{id}".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},getTimeseries({id:e,startDate:r,endDate:t,metric:a},i){if(!e)throw new Error("Parameter `id` is required when calling `getTimeseries`.");let s="/3/abtests/{id}/timeseries".replace("{id}",encodeURIComponent(e)),n={};void 0!==r&&(n.startDate=r.toString()),void 0!==t&&(n.endDate=t.toString()),void 0!==a&&(n.metric=a.toString());e={method:"GET",path:s,queryParameters:n,headers:{}};return o.request(e,i)},listABTests({offset:e,limit:r,indexPrefix:t,indexSuffix:a,direction:i}={},s=void 0){let n={};void 0!==e&&(n.offset=e.toString()),void 0!==r&&(n.limit=r.toString()),void 0!==t&&(n.indexPrefix=t.toString()),void 0!==a&&(n.indexSuffix=a.toString()),void 0!==i&&(n.direction=i.toString());e={method:"GET",path:"/3/abtests",queryParameters:n,headers:{}};return o.request(e,s)},scheduleABTest(e,r){if(!e)throw new Error("Parameter `scheduleABTestsRequest` is required when calling `scheduleABTest`.");if(!e.name)throw new Error("Parameter `scheduleABTestsRequest.name` is required when calling `scheduleABTest`.");if(!e.variants)throw new Error("Parameter `scheduleABTestsRequest.variants` is required when calling `scheduleABTest`.");if(!e.metrics)throw new Error("Parameter `scheduleABTestsRequest.metrics` is required when calling `scheduleABTest`.");if(!e.scheduledAt)throw new Error("Parameter `scheduleABTestsRequest.scheduledAt` is required when calling `scheduleABTest`.");if(!e.endAt)throw new Error("Parameter `scheduleABTestsRequest.endAt` is required when calling `scheduleABTest`.");e={method:"POST",path:"/3/abtests/schedule",queryParameters:{},headers:{},data:e};return o.request(e,r)},stopABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `stopABTest`.");e={method:"POST",path:"/3/abtests/{id}/stop".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)}}}throw new Error("`region` must be one of the following: "+o.join(", "))}var y="5.39.0",n=["de","us"];function i(r,t,a,i){if(!r||"string"!=typeof r)throw new Error("`appId` is missing.");if(!t||"string"!=typeof t)throw new Error("`apiKey` is missing.");if(!a||"string"==typeof a&&n.includes(a)){var{appId:t,apiKey:a,authMode:s,algoliaAgents:r,region:i,...o}=[{appId:r,apiKey:t,region:a,timeouts:{connect:1e3,read:2e3,write:3e4},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:y+"-"+r}),c()]}),...i}][0];let e=p(t,a,s),n=q({hosts:[{url:(i=i)?"analytics.{region}.algolia.com".replace("{region}",i):"analytics.algolia.com",accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:r,client:"Abtesting",version:y}),baseHeaders:{"content-type":"text/plain",...e.headers(),...o.baseHeaders},baseQueryParameters:{...e.queryParameters(),...o.baseQueryParameters}});return{transporter:n,appId:t,apiKey:a,clearCache(){return Promise.all([n.requestsCache.clear(),n.responsesCache.clear()]).then(()=>{})},get _ua(){return n.algoliaAgent.value},addAlgoliaAgent(e,r){n.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){s&&"WithinHeaders"!==s?n.baseQueryParameters["x-algolia-api-key"]=e:n.baseHeaders["x-algolia-api-key"]=e},addABTests(e,r){if(!e)throw new Error("Parameter `addABTestsRequest` is required when calling `addABTests`.");if(!e.name)throw new Error("Parameter `addABTestsRequest.name` is required when calling `addABTests`.");if(!e.variants)throw new Error("Parameter `addABTestsRequest.variants` is required when calling `addABTests`.");if(!e.endAt)throw new Error("Parameter `addABTestsRequest.endAt` is required when calling `addABTests`.");e={method:"POST",path:"/2/abtests",queryParameters:{},headers:{},data:e};return n.request(e,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return n.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return n.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return n.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return n.request(e,a)},deleteABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `deleteABTest`.");e={method:"DELETE",path:"/2/abtests/{id}".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(e,r)},estimateABTest(e,r){if(!e)throw new Error("Parameter `estimateABTestRequest` is required when calling `estimateABTest`.");if(!e.configuration)throw new Error("Parameter `estimateABTestRequest.configuration` is required when calling `estimateABTest`.");if(!e.variants)throw new Error("Parameter `estimateABTestRequest.variants` is required when calling `estimateABTest`.");e={method:"POST",path:"/2/abtests/estimate",queryParameters:{},headers:{},data:e};return n.request(e,r)},getABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `getABTest`.");e={method:"GET",path:"/2/abtests/{id}".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(e,r)},listABTests({offset:e,limit:r,indexPrefix:t,indexSuffix:a}={},i=void 0){let s={};void 0!==e&&(s.offset=e.toString()),void 0!==r&&(s.limit=r.toString()),void 0!==t&&(s.indexPrefix=t.toString()),void 0!==a&&(s.indexSuffix=a.toString());e={method:"GET",path:"/2/abtests",queryParameters:s,headers:{}};return n.request(e,i)},scheduleABTest(e,r){if(!e)throw new Error("Parameter `scheduleABTestsRequest` is required when calling `scheduleABTest`.");if(!e.name)throw new Error("Parameter `scheduleABTestsRequest.name` is required when calling `scheduleABTest`.");if(!e.variants)throw new Error("Parameter `scheduleABTestsRequest.variants` is required when calling `scheduleABTest`.");if(!e.scheduledAt)throw new Error("Parameter `scheduleABTestsRequest.scheduledAt` is required when calling `scheduleABTest`.");if(!e.endAt)throw new Error("Parameter `scheduleABTestsRequest.endAt` is required when calling `scheduleABTest`.");e={method:"POST",path:"/2/abtests/schedule",queryParameters:{},headers:{},data:e};return n.request(e,r)},stopABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `stopABTest`.");e={method:"POST",path:"/2/abtests/{id}/stop".replace("{id}",encodeURIComponent(e)),queryParameters:{},headers:{}};return n.request(e,r)}}}throw new Error("`region` must be one of the following: "+n.join(", "))}var f="5.39.0",E=["de","us"];function s(r,t,a,i){if(!r||"string"!=typeof r)throw new Error("`appId` is missing.");if(!t||"string"!=typeof t)throw new Error("`apiKey` is missing.");if(!a||"string"==typeof a&&E.includes(a)){var{appId:t,apiKey:a,authMode:s,algoliaAgents:r,region:i,...n}=[{appId:r,apiKey:t,region:a,timeouts:{connect:1e3,read:2e3,write:3e4},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:f+"-"+r}),c()]}),...i}][0];let e=p(t,a,s),l=q({hosts:[{url:(i=i)?"analytics.{region}.algolia.com".replace("{region}",i):"analytics.algolia.com",accept:"readWrite",protocol:"https"}],...n,algoliaAgent:w({algoliaAgents:r,client:"Analytics",version:f}),baseHeaders:{"content-type":"text/plain",...e.headers(),...n.baseHeaders},baseQueryParameters:{...e.queryParameters(),...n.baseQueryParameters}});return{transporter:l,appId:t,apiKey:a,clearCache(){return Promise.all([l.requestsCache.clear(),l.responsesCache.clear()]).then(()=>{})},get _ua(){return l.algoliaAgent.value},addAlgoliaAgent(e,r){l.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){s&&"WithinHeaders"!==s?l.baseQueryParameters["x-algolia-api-key"]=e:l.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return l.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return l.request(e,a)},getAddToCartRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getAddToCartRate`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/conversions/addToCartRate",queryParameters:s,headers:{}};return l.request(e,i)},getAverageClickPosition({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getAverageClickPosition`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/clicks/averageClickPosition",queryParameters:s,headers:{}};return l.request(e,i)},getClickPositions({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getClickPositions`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/clicks/positions",queryParameters:s,headers:{}};return l.request(e,i)},getClickThroughRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getClickThroughRate`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/clicks/clickThroughRate",queryParameters:s,headers:{}};return l.request(e,i)},getConversionRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getConversionRate`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/conversions/conversionRate",queryParameters:s,headers:{}};return l.request(e,i)},getNoClickRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getNoClickRate`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/searches/noClickRate",queryParameters:s,headers:{}};return l.request(e,i)},getNoResultsRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getNoResultsRate`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/searches/noResultRate",queryParameters:s,headers:{}};return l.request(e,i)},getPurchaseRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getPurchaseRate`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/conversions/purchaseRate",queryParameters:s,headers:{}};return l.request(e,i)},getRevenue({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getRevenue`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/conversions/revenue",queryParameters:s,headers:{}};return l.request(e,i)},getSearchesCount({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getSearchesCount`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/searches/count",queryParameters:s,headers:{}};return l.request(e,i)},getSearchesNoClicks({index:e,startDate:r,endDate:t,limit:a,offset:i,tags:s},n){if(!e)throw new Error("Parameter `index` is required when calling `getSearchesNoClicks`.");let o={};void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.limit=a.toString()),void 0!==i&&(o.offset=i.toString()),void 0!==s&&(o.tags=s.toString());e={method:"GET",path:"/2/searches/noClicks",queryParameters:o,headers:{}};return l.request(e,n)},getSearchesNoResults({index:e,startDate:r,endDate:t,limit:a,offset:i,tags:s},n){if(!e)throw new Error("Parameter `index` is required when calling `getSearchesNoResults`.");let o={};void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.limit=a.toString()),void 0!==i&&(o.offset=i.toString()),void 0!==s&&(o.tags=s.toString());e={method:"GET",path:"/2/searches/noResults",queryParameters:o,headers:{}};return l.request(e,n)},getStatus({index:e},r){if(!e)throw new Error("Parameter `index` is required when calling `getStatus`.");let t={};void 0!==e&&(t.index=e.toString());e={method:"GET",path:"/2/status",queryParameters:t,headers:{}};return l.request(e,r)},getTopCountries({index:e,startDate:r,endDate:t,limit:a,offset:i,tags:s},n){if(!e)throw new Error("Parameter `index` is required when calling `getTopCountries`.");let o={};void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.limit=a.toString()),void 0!==i&&(o.offset=i.toString()),void 0!==s&&(o.tags=s.toString());e={method:"GET",path:"/2/countries",queryParameters:o,headers:{}};return l.request(e,n)},getTopFilterAttributes({index:e,search:r,startDate:t,endDate:a,limit:i,offset:s,tags:n},o){if(!e)throw new Error("Parameter `index` is required when calling `getTopFilterAttributes`.");let d={};void 0!==e&&(d.index=e.toString()),void 0!==r&&(d.search=r.toString()),void 0!==t&&(d.startDate=t.toString()),void 0!==a&&(d.endDate=a.toString()),void 0!==i&&(d.limit=i.toString()),void 0!==s&&(d.offset=s.toString()),void 0!==n&&(d.tags=n.toString());e={method:"GET",path:"/2/filters",queryParameters:d,headers:{}};return l.request(e,o)},getTopFilterForAttribute({attribute:e,index:r,search:t,startDate:a,endDate:i,limit:s,offset:n,tags:o},d){if(!e)throw new Error("Parameter `attribute` is required when calling `getTopFilterForAttribute`.");if(!r)throw new Error("Parameter `index` is required when calling `getTopFilterForAttribute`.");let h="/2/filters/{attribute}".replace("{attribute}",encodeURIComponent(e)),u={};void 0!==r&&(u.index=r.toString()),void 0!==t&&(u.search=t.toString()),void 0!==a&&(u.startDate=a.toString()),void 0!==i&&(u.endDate=i.toString()),void 0!==s&&(u.limit=s.toString()),void 0!==n&&(u.offset=n.toString()),void 0!==o&&(u.tags=o.toString());e={method:"GET",path:h,queryParameters:u,headers:{}};return l.request(e,d)},getTopFiltersNoResults({index:e,search:r,startDate:t,endDate:a,limit:i,offset:s,tags:n},o){if(!e)throw new Error("Parameter `index` is required when calling `getTopFiltersNoResults`.");let d={};void 0!==e&&(d.index=e.toString()),void 0!==r&&(d.search=r.toString()),void 0!==t&&(d.startDate=t.toString()),void 0!==a&&(d.endDate=a.toString()),void 0!==i&&(d.limit=i.toString()),void 0!==s&&(d.offset=s.toString()),void 0!==n&&(d.tags=n.toString());e={method:"GET",path:"/2/filters/noResults",queryParameters:d,headers:{}};return l.request(e,o)},getTopHits({index:e,search:r,clickAnalytics:t,revenueAnalytics:a,startDate:i,endDate:s,limit:n,offset:o,tags:d},h){if(!e)throw new Error("Parameter `index` is required when calling `getTopHits`.");let u={};void 0!==e&&(u.index=e.toString()),void 0!==r&&(u.search=r.toString()),void 0!==t&&(u.clickAnalytics=t.toString()),void 0!==a&&(u.revenueAnalytics=a.toString()),void 0!==i&&(u.startDate=i.toString()),void 0!==s&&(u.endDate=s.toString()),void 0!==n&&(u.limit=n.toString()),void 0!==o&&(u.offset=o.toString()),void 0!==d&&(u.tags=d.toString());e={method:"GET",path:"/2/hits",queryParameters:u,headers:{}};return l.request(e,h)},getTopSearches({index:e,clickAnalytics:r,revenueAnalytics:t,startDate:a,endDate:i,orderBy:s,direction:n,limit:o,offset:d,tags:h},u){if(!e)throw new Error("Parameter `index` is required when calling `getTopSearches`.");let c={};void 0!==e&&(c.index=e.toString()),void 0!==r&&(c.clickAnalytics=r.toString()),void 0!==t&&(c.revenueAnalytics=t.toString()),void 0!==a&&(c.startDate=a.toString()),void 0!==i&&(c.endDate=i.toString()),void 0!==s&&(c.orderBy=s.toString()),void 0!==n&&(c.direction=n.toString()),void 0!==o&&(c.limit=o.toString()),void 0!==d&&(c.offset=d.toString()),void 0!==h&&(c.tags=h.toString());e={method:"GET",path:"/2/searches",queryParameters:c,headers:{}};return l.request(e,u)},getUsersCount({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw new Error("Parameter `index` is required when calling `getUsersCount`.");let s={};void 0!==e&&(s.index=e.toString()),void 0!==r&&(s.startDate=r.toString()),void 0!==t&&(s.endDate=t.toString()),void 0!==a&&(s.tags=a.toString());e={method:"GET",path:"/2/users/count",queryParameters:s,headers:{}};return l.request(e,i)}}}throw new Error("`region` must be one of the following: "+E.join(", "))}var I="5.39.0",S=["de","us"];function x(r,t,a,s){if(!r||"string"!=typeof r)throw new Error("`appId` is missing.");if(!t||"string"!=typeof t)throw new Error("`apiKey` is missing.");if(!a||"string"==typeof a&&S.includes(a)){var{appId:t,apiKey:a,authMode:n,algoliaAgents:r,region:s,...o}=[{appId:r,apiKey:t,region:a,timeouts:{connect:1e3,read:2e3,write:3e4},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:I+"-"+r}),c()]}),...s}][0];let e=p(t,a,n),i=q({hosts:[{url:(s=s)?"insights.{region}.algolia.io".replace("{region}",s):"insights.algolia.io",accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:r,client:"Insights",version:I}),baseHeaders:{"content-type":"text/plain",...e.headers(),...o.baseHeaders},baseQueryParameters:{...e.queryParameters(),...o.baseQueryParameters}});return{transporter:i,appId:t,apiKey:a,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then(()=>{})},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){n&&"WithinHeaders"!==n?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return i.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return i.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return i.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return i.request(e,a)},deleteUserToken({userToken:e},r){if(!e)throw new Error("Parameter `userToken` is required when calling `deleteUserToken`.");e={method:"DELETE",path:"/1/usertokens/{userToken}".replace("{userToken}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},pushEvents(e,r){if(!e)throw new Error("Parameter `insightsEvents` is required when calling `pushEvents`.");if(!e.events)throw new Error("Parameter `insightsEvents.events` is required when calling `pushEvents`.");e={method:"POST",path:"/1/events",queryParameters:{},headers:{},data:e};return i.request(e,r)}}}throw new Error("`region` must be one of the following: "+S.join(", "))}var b="5.39.0",k=["eu","us"];function R(r,t,a,s){if(!r||"string"!=typeof r)throw new Error("`appId` is missing.");if(!t||"string"!=typeof t)throw new Error("`apiKey` is missing.");if(a&&"string"==typeof a&&k.includes(a)){var{appId:t,apiKey:a,authMode:n,algoliaAgents:r,region:s,...o}=[{appId:r,apiKey:t,region:a,timeouts:{connect:1e3,read:2e3,write:3e4},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:b+"-"+r}),c()]}),...s}][0];let e=p(t,a,n),i=q({hosts:[{url:"personalization.{region}.algolia.com".replace("{region}",s),accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:r,client:"Personalization",version:b}),baseHeaders:{"content-type":"text/plain",...e.headers(),...o.baseHeaders},baseQueryParameters:{...e.queryParameters(),...o.baseQueryParameters}});return{transporter:i,appId:t,apiKey:a,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then(()=>{})},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){n&&"WithinHeaders"!==n?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return i.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return i.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return i.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return i.request(e,a)},deleteUserProfile({userToken:e},r){if(!e)throw new Error("Parameter `userToken` is required when calling `deleteUserProfile`.");e={method:"DELETE",path:"/1/profiles/{userToken}".replace("{userToken}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},getPersonalizationStrategy(e){return i.request({method:"GET",path:"/1/strategies/personalization",queryParameters:{},headers:{}},e)},getUserTokenProfile({userToken:e},r){if(!e)throw new Error("Parameter `userToken` is required when calling `getUserTokenProfile`.");e={method:"GET",path:"/1/profiles/personalization/{userToken}".replace("{userToken}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},setPersonalizationStrategy(e,r){if(!e)throw new Error("Parameter `personalizationStrategyParams` is required when calling `setPersonalizationStrategy`.");if(!e.eventsScoring)throw new Error("Parameter `personalizationStrategyParams.eventsScoring` is required when calling `setPersonalizationStrategy`.");if(!e.facetsScoring)throw new Error("Parameter `personalizationStrategyParams.facetsScoring` is required when calling `setPersonalizationStrategy`.");if(!e.personalizationImpact)throw new Error("Parameter `personalizationStrategyParams.personalizationImpact` is required when calling `setPersonalizationStrategy`.");e={method:"POST",path:"/1/strategies/personalization",queryParameters:{},headers:{},data:e};return i.request(e,r)}}}throw new Error("`region` is required and must be one of the following: "+k.join(", "))}var C="5.39.0",A=["eu","us"];function N(r,t,a,s){if(!r||"string"!=typeof r)throw new Error("`appId` is missing.");if(!t||"string"!=typeof t)throw new Error("`apiKey` is missing.");if(a&&"string"==typeof a&&A.includes(a)){var{appId:t,apiKey:a,authMode:n,algoliaAgents:r,region:s,...o}=[{appId:r,apiKey:t,region:a,timeouts:{connect:1e3,read:2e3,write:3e4},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:C+"-"+r}),c()]}),...s}][0];let e=p(t,a,n),i=q({hosts:[{url:"query-suggestions.{region}.algolia.com".replace("{region}",s),accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:r,client:"QuerySuggestions",version:C}),baseHeaders:{"content-type":"text/plain",...e.headers(),...o.baseHeaders},baseQueryParameters:{...e.queryParameters(),...o.baseQueryParameters}});return{transporter:i,appId:t,apiKey:a,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then(()=>{})},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){n&&"WithinHeaders"!==n?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},createConfig(e,r){if(!e)throw new Error("Parameter `configurationWithIndex` is required when calling `createConfig`.");e={method:"POST",path:"/1/configs",queryParameters:{},headers:{},data:e};return i.request(e,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return i.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return i.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return i.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return i.request(e,a)},deleteConfig({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteConfig`.");e={method:"DELETE",path:"/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},getAllConfigs(e){return i.request({method:"GET",path:"/1/configs",queryParameters:{},headers:{}},e)},getConfig({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getConfig`.");e={method:"GET",path:"/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},getConfigStatus({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getConfigStatus`.");e={method:"GET",path:"/1/configs/{indexName}/status".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},getLogFile({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getLogFile`.");e={method:"GET",path:"/1/logs/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},updateConfig({indexName:e,configuration:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `updateConfig`.");if(!r)throw new Error("Parameter `configuration` is required when calling `updateConfig`.");if(!r.sourceIndices)throw new Error("Parameter `configuration.sourceIndices` is required when calling `updateConfig`.");e={method:"PUT",path:"/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return i.request(e,t)}}}throw new Error("`region` is required and must be one of the following: "+A.join(", "))}var U="5.39.0";function H({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...i}){let s=p(e,r,t),o=q({hosts:[{url:e+"-dsn.algolia.net",accept:"read",protocol:"https"},{url:e+".algolia.net",accept:"write",protocol:"https"}].concat(l([{url:e+"-1.algolianet.com",accept:"readWrite",protocol:"https"},{url:e+"-2.algolianet.com",accept:"readWrite",protocol:"https"},{url:e+"-3.algolianet.com",accept:"readWrite",protocol:"https"}])),...i,algoliaAgent:w({algoliaAgents:a,client:"Search",version:U}),baseHeaders:{"content-type":"text/plain",...s.headers(),...i.baseHeaders},baseQueryParameters:{...s.queryParameters(),...i.baseQueryParameters}});return{transporter:o,appId:e,apiKey:r,clearCache(){return Promise.all([o.requestsCache.clear(),o.responsesCache.clear()]).then(()=>{})},get _ua(){return o.algoliaAgent.value},addAlgoliaAgent(e,r){o.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?o.baseQueryParameters["x-algolia-api-key"]=e:o.baseHeaders["x-algolia-api-key"]=e},waitForTask({indexName:e,taskID:r,maxRetries:t=50,timeout:a=e=>Math.min(200*e,5e3)},i){let s=0;return g({func:()=>this.getTask({indexName:e,taskID:r},i),validate:e=>"published"===e.status,aggregator:()=>s+=1,error:{validate:()=>s>=t,message:()=>`The maximum number of retries exceeded. (${s}/${t})`},timeout:()=>a(s)})},waitForAppTask({taskID:e,maxRetries:r=50,timeout:t=e=>Math.min(200*e,5e3)},a){let i=0;return g({func:()=>this.getAppTask({taskID:e},a),validate:e=>"published"===e.status,aggregator:()=>i+=1,error:{validate:()=>i>=r,message:()=>`The maximum number of retries exceeded. (${i}/${r})`},timeout:()=>t(i)})},waitForApiKey({operation:r,key:e,apiKey:i,maxRetries:t=50,timeout:a=e=>Math.min(200*e,5e3)},s){let n=0,o={aggregator:()=>n+=1,error:{validate:()=>n>=t,message:()=>`The maximum number of retries exceeded. (${n}/${t})`},timeout:()=>a(n)};if("update"!==r)return g({...o,func:()=>this.getApiKey({key:e},s).catch(e=>{if(404!==e.status)throw e}),validate:e=>"add"===r?void 0!==e:void 0===e});if(i)return g({...o,func:()=>this.getApiKey({key:e},s),validate:r=>{for(var a of Object.keys(i)){let e=i[a],t=r[a];if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length||e.some((e,r)=>e!==t[r]))return!1}else if(e!==t)return!1}return!0}});throw new Error("`apiKey` is required when waiting for an `update` operation.")},browseObjects({indexName:r,browseParams:t,...e},a){return g({func:e=>this.browse({indexName:r,browseParams:{cursor:e?e.cursor:void 0,hitsPerPage:1e3,...t}},a),validate:e=>void 0===e.cursor,...e})},browseRules({indexName:r,searchRulesParams:e,...t},a){let i={...e,hitsPerPage:e?.hitsPerPage||1e3};return g({func:e=>this.searchRules({indexName:r,searchRulesParams:{...i,page:e?e.page+1:i.page||0}},a),validate:e=>e.hits.length<i.hitsPerPage,...t})},browseSynonyms({indexName:t,searchSynonymsParams:e,...r},a){let i={...e,page:e?.page||0,hitsPerPage:1e3};return g({func:e=>{var r=this.searchSynonyms({indexName:t,searchSynonymsParams:{...i,page:i.page}},a);return i.page+=1,r},validate:e=>e.hits.length<i.hitsPerPage,...r})},async chunkedBatch({indexName:e,objects:r,action:t="addObject",waitForTasks:a,batchSize:i=1e3},s){let n=[],o=[],d=r.entries();for(var[h,u]of d)n.push({action:t,body:u}),n.length!==i&&h!==r.length-1||(o.push(await this.batch({indexName:e,batchWriteParams:{requests:n}},s)),n=[]);if(a)for(var c of o)await this.waitForTask({indexName:e,taskID:c.taskID});return o},async saveObjects({indexName:e,objects:r,waitForTasks:t,batchSize:a},i){return this.chunkedBatch({indexName:e,objects:r,action:"addObject",waitForTasks:t,batchSize:a},i)},async deleteObjects({indexName:e,objectIDs:r,waitForTasks:t,batchSize:a},i){return this.chunkedBatch({indexName:e,objects:r.map(e=>({objectID:e})),action:"deleteObject",waitForTasks:t,batchSize:a},i)},async partialUpdateObjects({indexName:e,objects:r,createIfNotExists:t,waitForTasks:a,batchSize:i},s){return this.chunkedBatch({indexName:e,objects:r,action:t?"partialUpdateObject":"partialUpdateObjectNoCreate",batchSize:i,waitForTasks:a},s)},async replaceAllObjects({indexName:e,objects:r,batchSize:t,scopes:a},i){var s=e+"_tmp_"+(Math.floor(1e6*Math.random())+1e5);void 0===a&&(a=["settings","rules","synonyms"]);try{var n=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:s,scope:a}},i),o=await this.chunkedBatch({indexName:s,objects:r,waitForTasks:!0,batchSize:t},i),d=(await this.waitForTask({indexName:s,taskID:n.taskID}),n=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:s,scope:a}},i),await this.waitForTask({indexName:s,taskID:n.taskID}),await this.operationIndex({indexName:s,operationIndexParams:{operation:"move",destination:e}},i));return await this.waitForTask({indexName:s,taskID:d.taskID}),{copyOperationResponse:n,batchResponses:o,moveOperationResponse:d}}catch(e){throw await this.deleteIndex({indexName:s}),e}},async indexExists({indexName:e}){try{await this.getSettings({indexName:e})}catch(e){if(e instanceof v&&404===e.status)return!1;throw e}return!0},searchForHits(e,r){return this.search(e,r)},searchForFacets(e,r){return this.search(e,r)},addApiKey(e,r){if(!e)throw new Error("Parameter `apiKey` is required when calling `addApiKey`.");if(!e.acl)throw new Error("Parameter `apiKey.acl` is required when calling `addApiKey`.");e={method:"POST",path:"/1/keys",queryParameters:{},headers:{},data:e};return o.request(e,r)},addOrUpdateObject({indexName:e,objectID:r,body:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `addOrUpdateObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `addOrUpdateObject`.");if(!t)throw new Error("Parameter `body` is required when calling `addOrUpdateObject`.");e={method:"PUT",path:"/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),queryParameters:{},headers:{},data:t};return o.request(e,a)},appendSource(e,r){if(!e)throw new Error("Parameter `source` is required when calling `appendSource`.");if(!e.source)throw new Error("Parameter `source.source` is required when calling `appendSource`.");e={method:"POST",path:"/1/security/sources/append",queryParameters:{},headers:{},data:e};return o.request(e,r)},assignUserId({xAlgoliaUserID:e,assignUserIdParams:r},t){if(!e)throw new Error("Parameter `xAlgoliaUserID` is required when calling `assignUserId`.");if(!r)throw new Error("Parameter `assignUserIdParams` is required when calling `assignUserId`.");if(!r.cluster)throw new Error("Parameter `assignUserIdParams.cluster` is required when calling `assignUserId`.");let a={};void 0!==e&&(a["X-Algolia-User-ID"]=e.toString());e={method:"POST",path:"/1/clusters/mapping",queryParameters:{},headers:a,data:r};return o.request(e,t)},batch({indexName:e,batchWriteParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `batch`.");if(!r)throw new Error("Parameter `batchWriteParams` is required when calling `batch`.");if(!r.requests)throw new Error("Parameter `batchWriteParams.requests` is required when calling `batch`.");e={method:"POST",path:"/1/indexes/{indexName}/batch".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return o.request(e,t)},batchAssignUserIds({xAlgoliaUserID:e,batchAssignUserIdsParams:r},t){if(!e)throw new Error("Parameter `xAlgoliaUserID` is required when calling `batchAssignUserIds`.");if(!r)throw new Error("Parameter `batchAssignUserIdsParams` is required when calling `batchAssignUserIds`.");if(!r.cluster)throw new Error("Parameter `batchAssignUserIdsParams.cluster` is required when calling `batchAssignUserIds`.");if(!r.users)throw new Error("Parameter `batchAssignUserIdsParams.users` is required when calling `batchAssignUserIds`.");let a={};void 0!==e&&(a["X-Algolia-User-ID"]=e.toString());e={method:"POST",path:"/1/clusters/mapping/batch",queryParameters:{},headers:a,data:r};return o.request(e,t)},batchDictionaryEntries({dictionaryName:e,batchDictionaryEntriesParams:r},t){if(!e)throw new Error("Parameter `dictionaryName` is required when calling `batchDictionaryEntries`.");if(!r)throw new Error("Parameter `batchDictionaryEntriesParams` is required when calling `batchDictionaryEntries`.");if(!r.requests)throw new Error("Parameter `batchDictionaryEntriesParams.requests` is required when calling `batchDictionaryEntries`.");e={method:"POST",path:"/1/dictionaries/{dictionaryName}/batch".replace("{dictionaryName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return o.request(e,t)},browse({indexName:e,browseParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `browse`.");e={method:"POST",path:"/1/indexes/{indexName}/browse".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{},useReadTransporter:!0};return o.request(e,t)},clearObjects({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `clearObjects`.");e={method:"POST",path:"/1/indexes/{indexName}/clear".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},clearRules({indexName:e,forwardToReplicas:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `clearRules`.");let a="/1/indexes/{indexName}/rules/clear".replace("{indexName}",encodeURIComponent(e)),i={};void 0!==r&&(i.forwardToReplicas=r.toString());e={method:"POST",path:a,queryParameters:i,headers:{}};return o.request(e,t)},clearSynonyms({indexName:e,forwardToReplicas:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `clearSynonyms`.");let a="/1/indexes/{indexName}/synonyms/clear".replace("{indexName}",encodeURIComponent(e)),i={};void 0!==r&&(i.forwardToReplicas=r.toString());e={method:"POST",path:a,queryParameters:i,headers:{}};return o.request(e,t)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return o.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return o.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return o.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return o.request(e,a)},deleteApiKey({key:e},r){if(!e)throw new Error("Parameter `key` is required when calling `deleteApiKey`.");e={method:"DELETE",path:"/1/keys/{key}".replace("{key}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},deleteBy({indexName:e,deleteByParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteBy`.");if(!r)throw new Error("Parameter `deleteByParams` is required when calling `deleteBy`.");e={method:"POST",path:"/1/indexes/{indexName}/deleteByQuery".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return o.request(e,t)},deleteIndex({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteIndex`.");e={method:"DELETE",path:"/1/indexes/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},deleteObject({indexName:e,objectID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `deleteObject`.");e={method:"DELETE",path:"/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return o.request(e,t)},deleteRule({indexName:e,objectID:r,forwardToReplicas:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteRule`.");if(!r)throw new Error("Parameter `objectID` is required when calling `deleteRule`.");let i="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={};void 0!==t&&(s.forwardToReplicas=t.toString());e={method:"DELETE",path:i,queryParameters:s,headers:{}};return o.request(e,a)},deleteSource({source:e},r){if(!e)throw new Error("Parameter `source` is required when calling `deleteSource`.");e={method:"DELETE",path:"/1/security/sources/{source}".replace("{source}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},deleteSynonym({indexName:e,objectID:r,forwardToReplicas:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteSynonym`.");if(!r)throw new Error("Parameter `objectID` is required when calling `deleteSynonym`.");let i="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={};void 0!==t&&(s.forwardToReplicas=t.toString());e={method:"DELETE",path:i,queryParameters:s,headers:{}};return o.request(e,a)},getApiKey({key:e},r){if(!e)throw new Error("Parameter `key` is required when calling `getApiKey`.");e={method:"GET",path:"/1/keys/{key}".replace("{key}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},getAppTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getAppTask`.");e={method:"GET",path:"/1/task/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},getDictionaryLanguages(e){return o.request({method:"GET",path:"/1/dictionaries/*/languages",queryParameters:{},headers:{}},e)},getDictionarySettings(e){return o.request({method:"GET",path:"/1/dictionaries/*/settings",queryParameters:{},headers:{}},e)},getLogs({offset:e,length:r,indexName:t,type:a}={},i=void 0){let s={};void 0!==e&&(s.offset=e.toString()),void 0!==r&&(s.length=r.toString()),void 0!==t&&(s.indexName=t.toString()),void 0!==a&&(s.type=a.toString());e={method:"GET",path:"/1/logs",queryParameters:s,headers:{}};return o.request(e,i)},getObject({indexName:e,objectID:r,attributesToRetrieve:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `getObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `getObject`.");let i="/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={};void 0!==t&&(s.attributesToRetrieve=t.toString());e={method:"GET",path:i,queryParameters:s,headers:{}};return o.request(e,a)},getObjects(e,r){if(!e)throw new Error("Parameter `getObjectsParams` is required when calling `getObjects`.");if(!e.requests)throw new Error("Parameter `getObjectsParams.requests` is required when calling `getObjects`.");e={method:"POST",path:"/1/indexes/*/objects",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return o.request(e,r)},getRule({indexName:e,objectID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getRule`.");if(!r)throw new Error("Parameter `objectID` is required when calling `getRule`.");e={method:"GET",path:"/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return o.request(e,t)},getSettings({indexName:e,getVersion:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getSettings`.");let a="/1/indexes/{indexName}/settings".replace("{indexName}",encodeURIComponent(e)),i={};void 0!==r&&(i.getVersion=r.toString());e={method:"GET",path:a,queryParameters:i,headers:{}};return o.request(e,t)},getSources(e){return o.request({method:"GET",path:"/1/security/sources",queryParameters:{},headers:{}},e)},getSynonym({indexName:e,objectID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getSynonym`.");if(!r)throw new Error("Parameter `objectID` is required when calling `getSynonym`.");e={method:"GET",path:"/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return o.request(e,t)},getTask({indexName:e,taskID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getTask`.");if(!r)throw new Error("Parameter `taskID` is required when calling `getTask`.");e={method:"GET",path:"/1/indexes/{indexName}/task/{taskID}".replace("{indexName}",encodeURIComponent(e)).replace("{taskID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return o.request(e,t)},getTopUserIds(e){return o.request({method:"GET",path:"/1/clusters/mapping/top",queryParameters:{},headers:{}},e)},getUserId({userID:e},r){if(!e)throw new Error("Parameter `userID` is required when calling `getUserId`.");e={method:"GET",path:"/1/clusters/mapping/{userID}".replace("{userID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},hasPendingMappings({getClusters:e}={},r=void 0){let t={};void 0!==e&&(t.getClusters=e.toString());e={method:"GET",path:"/1/clusters/mapping/pending",queryParameters:t,headers:{}};return o.request(e,r)},listApiKeys(e){return o.request({method:"GET",path:"/1/keys",queryParameters:{},headers:{}},e)},listClusters(e){return o.request({method:"GET",path:"/1/clusters",queryParameters:{},headers:{}},e)},listIndices({page:e,hitsPerPage:r}={},t=void 0){let a={};void 0!==e&&(a.page=e.toString()),void 0!==r&&(a.hitsPerPage=r.toString());e={method:"GET",path:"/1/indexes",queryParameters:a,headers:{}};return o.request(e,t)},listUserIds({page:e,hitsPerPage:r}={},t=void 0){let a={};void 0!==e&&(a.page=e.toString()),void 0!==r&&(a.hitsPerPage=r.toString());e={method:"GET",path:"/1/clusters/mapping",queryParameters:a,headers:{}};return o.request(e,t)},multipleBatch(e,r){if(!e)throw new Error("Parameter `batchParams` is required when calling `multipleBatch`.");if(!e.requests)throw new Error("Parameter `batchParams.requests` is required when calling `multipleBatch`.");e={method:"POST",path:"/1/indexes/*/batch",queryParameters:{},headers:{},data:e};return o.request(e,r)},operationIndex({indexName:e,operationIndexParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `operationIndex`.");if(!r)throw new Error("Parameter `operationIndexParams` is required when calling `operationIndex`.");if(!r.operation)throw new Error("Parameter `operationIndexParams.operation` is required when calling `operationIndex`.");if(!r.destination)throw new Error("Parameter `operationIndexParams.destination` is required when calling `operationIndex`.");e={method:"POST",path:"/1/indexes/{indexName}/operation".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return o.request(e,t)},partialUpdateObject({indexName:e,objectID:r,attributesToUpdate:t,createIfNotExists:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `partialUpdateObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `partialUpdateObject`.");if(!t)throw new Error("Parameter `attributesToUpdate` is required when calling `partialUpdateObject`.");let s="/1/indexes/{indexName}/{objectID}/partial".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={};void 0!==a&&(n.createIfNotExists=a.toString());e={method:"POST",path:s,queryParameters:n,headers:{},data:t};return o.request(e,i)},removeUserId({userID:e},r){if(!e)throw new Error("Parameter `userID` is required when calling `removeUserId`.");e={method:"DELETE",path:"/1/clusters/mapping/{userID}".replace("{userID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},replaceSources({source:e},r){if(!e)throw new Error("Parameter `source` is required when calling `replaceSources`.");e={method:"PUT",path:"/1/security/sources",queryParameters:{},headers:{},data:e};return o.request(e,r)},restoreApiKey({key:e},r){if(!e)throw new Error("Parameter `key` is required when calling `restoreApiKey`.");e={method:"POST",path:"/1/keys/{key}/restore".replace("{key}",encodeURIComponent(e)),queryParameters:{},headers:{}};return o.request(e,r)},saveObject({indexName:e,body:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `saveObject`.");if(!r)throw new Error("Parameter `body` is required when calling `saveObject`.");e={method:"POST",path:"/1/indexes/{indexName}".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return o.request(e,t)},saveRule({indexName:e,objectID:r,rule:t,forwardToReplicas:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `saveRule`.");if(!r)throw new Error("Parameter `objectID` is required when calling `saveRule`.");if(!t)throw new Error("Parameter `rule` is required when calling `saveRule`.");if(!t.objectID)throw new Error("Parameter `rule.objectID` is required when calling `saveRule`.");if(!t.consequence)throw new Error("Parameter `rule.consequence` is required when calling `saveRule`.");let s="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={};void 0!==a&&(n.forwardToReplicas=a.toString());e={method:"PUT",path:s,queryParameters:n,headers:{},data:t};return o.request(e,i)},saveRules({indexName:e,rules:r,forwardToReplicas:t,clearExistingRules:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `saveRules`.");if(!r)throw new Error("Parameter `rules` is required when calling `saveRules`.");let s="/1/indexes/{indexName}/rules/batch".replace("{indexName}",encodeURIComponent(e)),n={};void 0!==t&&(n.forwardToReplicas=t.toString()),void 0!==a&&(n.clearExistingRules=a.toString());e={method:"POST",path:s,queryParameters:n,headers:{},data:r};return o.request(e,i)},saveSynonym({indexName:e,objectID:r,synonymHit:t,forwardToReplicas:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `saveSynonym`.");if(!r)throw new Error("Parameter `objectID` is required when calling `saveSynonym`.");if(!t)throw new Error("Parameter `synonymHit` is required when calling `saveSynonym`.");if(!t.objectID)throw new Error("Parameter `synonymHit.objectID` is required when calling `saveSynonym`.");if(!t.type)throw new Error("Parameter `synonymHit.type` is required when calling `saveSynonym`.");let s="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={};void 0!==a&&(n.forwardToReplicas=a.toString());e={method:"PUT",path:s,queryParameters:n,headers:{},data:t};return o.request(e,i)},saveSynonyms({indexName:e,synonymHit:r,forwardToReplicas:t,replaceExistingSynonyms:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `saveSynonyms`.");if(!r)throw new Error("Parameter `synonymHit` is required when calling `saveSynonyms`.");let s="/1/indexes/{indexName}/synonyms/batch".replace("{indexName}",encodeURIComponent(e)),n={};void 0!==t&&(n.forwardToReplicas=t.toString()),void 0!==a&&(n.replaceExistingSynonyms=a.toString());e={method:"POST",path:s,queryParameters:n,headers:{},data:r};return o.request(e,i)},search(e,r){if(!(e=e&&Array.isArray(e)?{requests:e.map(({params:e,...r})=>"facet"===r.type?{...r,...e,type:"facet"}:{...r,...e,facet:void 0,maxFacetHits:void 0,facetQuery:void 0})}:e))throw new Error("Parameter `searchMethodParams` is required when calling `search`.");if(!e.requests)throw new Error("Parameter `searchMethodParams.requests` is required when calling `search`.");e={method:"POST",path:"/1/indexes/*/queries",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return o.request(e,r)},searchDictionaryEntries({dictionaryName:e,searchDictionaryEntriesParams:r},t){if(!e)throw new Error("Parameter `dictionaryName` is required when calling `searchDictionaryEntries`.");if(!r)throw new Error("Parameter `searchDictionaryEntriesParams` is required when calling `searchDictionaryEntries`.");if(!r.query)throw new Error("Parameter `searchDictionaryEntriesParams.query` is required when calling `searchDictionaryEntries`.");e={method:"POST",path:"/1/dictionaries/{dictionaryName}/search".replace("{dictionaryName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r,useReadTransporter:!0,cacheable:!0};return o.request(e,t)},searchForFacetValues({indexName:e,facetName:r,searchForFacetValuesRequest:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `searchForFacetValues`.");if(!r)throw new Error("Parameter `facetName` is required when calling `searchForFacetValues`.");e={method:"POST",path:"/1/indexes/{indexName}/facets/{facetName}/query".replace("{indexName}",encodeURIComponent(e)).replace("{facetName}",encodeURIComponent(r)),queryParameters:{},headers:{},data:t||{},useReadTransporter:!0,cacheable:!0};return o.request(e,a)},searchRules({indexName:e,searchRulesParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `searchRules`.");e={method:"POST",path:"/1/indexes/{indexName}/rules/search".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{},useReadTransporter:!0,cacheable:!0};return o.request(e,t)},searchSingleIndex({indexName:e,searchParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `searchSingleIndex`.");e={method:"POST",path:"/1/indexes/{indexName}/query".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{},useReadTransporter:!0,cacheable:!0};return o.request(e,t)},searchSynonyms({indexName:e,searchSynonymsParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `searchSynonyms`.");e={method:"POST",path:"/1/indexes/{indexName}/synonyms/search".replace("{indexName}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{},useReadTransporter:!0,cacheable:!0};return o.request(e,t)},searchUserIds(e,r){if(!e)throw new Error("Parameter `searchUserIdsParams` is required when calling `searchUserIds`.");if(!e.query)throw new Error("Parameter `searchUserIdsParams.query` is required when calling `searchUserIds`.");e={method:"POST",path:"/1/clusters/mapping/search",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return o.request(e,r)},setDictionarySettings(e,r){if(!e)throw new Error("Parameter `dictionarySettingsParams` is required when calling `setDictionarySettings`.");if(!e.disableStandardEntries)throw new Error("Parameter `dictionarySettingsParams.disableStandardEntries` is required when calling `setDictionarySettings`.");e={method:"PUT",path:"/1/dictionaries/*/settings",queryParameters:{},headers:{},data:e};return o.request(e,r)},setSettings({indexName:e,indexSettings:r,forwardToReplicas:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `setSettings`.");if(!r)throw new Error("Parameter `indexSettings` is required when calling `setSettings`.");let i="/1/indexes/{indexName}/settings".replace("{indexName}",encodeURIComponent(e)),s={};void 0!==t&&(s.forwardToReplicas=t.toString());e={method:"PUT",path:i,queryParameters:s,headers:{},data:r};return o.request(e,a)},updateApiKey({key:e,apiKey:r},t){if(!e)throw new Error("Parameter `key` is required when calling `updateApiKey`.");if(!r)throw new Error("Parameter `apiKey` is required when calling `updateApiKey`.");if(!r.acl)throw new Error("Parameter `apiKey.acl` is required when calling `updateApiKey`.");e={method:"PUT",path:"/1/keys/{key}".replace("{key}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return o.request(e,t)}}}function F(e,r,t){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(r&&"string"==typeof r)return H({appId:e,apiKey:r,timeouts:{connect:1e3,read:2e3,write:3e4},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:U+"-"+e}),c()]}),...t});throw new Error("`apiKey` is missing.")}var Q="1.39.0",W=["eu","us"];function O(r,t,a,i){if(!r||"string"!=typeof r)throw new Error("`appId` is missing.");if(!t||"string"!=typeof t)throw new Error("`apiKey` is missing.");if(a&&"string"==typeof a&&W.includes(a)){var{appId:t,apiKey:a,authMode:s,algoliaAgents:r,region:i,...n}=[{appId:r,apiKey:t,region:a,timeouts:{connect:25e3,read:25e3,write:25e3},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:Q+"-"+r}),c()]}),...i}][0];let e=p(t,a,s),m=q({hosts:[{url:"data.{region}.algolia.com".replace("{region}",i),accept:"readWrite",protocol:"https"}],...n,algoliaAgent:w({algoliaAgents:r,client:"Ingestion",version:Q}),baseHeaders:{"content-type":"text/plain",...e.headers(),...n.baseHeaders},baseQueryParameters:{...e.queryParameters(),...n.baseQueryParameters}});return{transporter:m,appId:t,apiKey:a,clearCache(){return Promise.all([m.requestsCache.clear(),m.responsesCache.clear()]).then(()=>{})},get _ua(){return m.algoliaAgent.value},addAlgoliaAgent(e,r){m.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){s&&"WithinHeaders"!==s?m.baseQueryParameters["x-algolia-api-key"]=e:m.baseHeaders["x-algolia-api-key"]=e},async chunkedPush({indexName:e,objects:r,action:t="addObject",waitForTasks:a,batchSize:i=1e3,referenceIndexName:s},n){let o=[],d=0,h=[],u=Math.floor(i/10)||i,c=r.entries();for(var[l,m]of c)if(o.push(m),o.length!==i&&l!==r.length-1||(h.push(await this.push({indexName:e,pushTaskPayload:{action:t,records:o},referenceIndexName:s},n)),o=[]),a&&0<h.length&&(h.length%u==0||l===r.length-1)){for(let r of h.slice(d,d+u)){if(!r.eventID)throw new Error("received unexpected response from the push endpoint, eventID must not be undefined");let e=0;await g({func:async()=>{if(void 0!==r.eventID&&r.eventID)return this.getEvent({runID:r.runID,eventID:r.eventID}).catch(e=>{if(404!==e.status)throw e});throw new Error("received unexpected response from the push endpoint, eventID must not be undefined")},validate:e=>void 0!==e,aggregator:()=>e+=1,error:{validate:()=>50<=e,message:()=>`The maximum number of retries exceeded. (${e}/50)`},timeout:()=>Math.min(500*e,5e3)})}d+=u}return h},createAuthentication(e,r){if(!e)throw new Error("Parameter `authenticationCreate` is required when calling `createAuthentication`.");if(!e.type)throw new Error("Parameter `authenticationCreate.type` is required when calling `createAuthentication`.");if(!e.name)throw new Error("Parameter `authenticationCreate.name` is required when calling `createAuthentication`.");if(!e.input)throw new Error("Parameter `authenticationCreate.input` is required when calling `createAuthentication`.");e={method:"POST",path:"/1/authentications",queryParameters:{},headers:{},data:e};return m.request(e,r)},createDestination(e,r){if(!e)throw new Error("Parameter `destinationCreate` is required when calling `createDestination`.");if(!e.type)throw new Error("Parameter `destinationCreate.type` is required when calling `createDestination`.");if(!e.name)throw new Error("Parameter `destinationCreate.name` is required when calling `createDestination`.");if(!e.input)throw new Error("Parameter `destinationCreate.input` is required when calling `createDestination`.");e={method:"POST",path:"/1/destinations",queryParameters:{},headers:{},data:e};return m.request(e,r)},createSource(e,r){if(!e)throw new Error("Parameter `sourceCreate` is required when calling `createSource`.");if(!e.type)throw new Error("Parameter `sourceCreate.type` is required when calling `createSource`.");if(!e.name)throw new Error("Parameter `sourceCreate.name` is required when calling `createSource`.");e={method:"POST",path:"/1/sources",queryParameters:{},headers:{},data:e};return m.request(e,r)},createTask(e,r){if(!e)throw new Error("Parameter `taskCreate` is required when calling `createTask`.");if(!e.sourceID)throw new Error("Parameter `taskCreate.sourceID` is required when calling `createTask`.");if(!e.destinationID)throw new Error("Parameter `taskCreate.destinationID` is required when calling `createTask`.");if(!e.action)throw new Error("Parameter `taskCreate.action` is required when calling `createTask`.");e={method:"POST",path:"/2/tasks",queryParameters:{},headers:{},data:e};return m.request(e,r)},createTaskV1(e,r){if(!e)throw new Error("Parameter `taskCreate` is required when calling `createTaskV1`.");if(!e.sourceID)throw new Error("Parameter `taskCreate.sourceID` is required when calling `createTaskV1`.");if(!e.destinationID)throw new Error("Parameter `taskCreate.destinationID` is required when calling `createTaskV1`.");if(!e.trigger)throw new Error("Parameter `taskCreate.trigger` is required when calling `createTaskV1`.");if(!e.action)throw new Error("Parameter `taskCreate.action` is required when calling `createTaskV1`.");e={method:"POST",path:"/1/tasks",queryParameters:{},headers:{},data:e};return m.request(e,r)},createTransformation(e,r){if(!e)throw new Error("Parameter `transformationCreate` is required when calling `createTransformation`.");if(!e.name)throw new Error("Parameter `transformationCreate.name` is required when calling `createTransformation`.");e={method:"POST",path:"/1/transformations",queryParameters:{},headers:{},data:e};return m.request(e,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return m.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return m.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return m.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return m.request(e,a)},deleteAuthentication({authenticationID:e},r){if(!e)throw new Error("Parameter `authenticationID` is required when calling `deleteAuthentication`.");e={method:"DELETE",path:"/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},deleteDestination({destinationID:e},r){if(!e)throw new Error("Parameter `destinationID` is required when calling `deleteDestination`.");e={method:"DELETE",path:"/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},deleteSource({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `deleteSource`.");e={method:"DELETE",path:"/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},deleteTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `deleteTask`.");e={method:"DELETE",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},deleteTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `deleteTaskV1`.");e={method:"DELETE",path:"/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},deleteTransformation({transformationID:e},r){if(!e)throw new Error("Parameter `transformationID` is required when calling `deleteTransformation`.");e={method:"DELETE",path:"/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},disableTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `disableTask`.");e={method:"PUT",path:"/2/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},disableTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `disableTaskV1`.");e={method:"PUT",path:"/1/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},enableTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `enableTask`.");e={method:"PUT",path:"/2/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},enableTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `enableTaskV1`.");e={method:"PUT",path:"/1/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},getAuthentication({authenticationID:e},r){if(!e)throw new Error("Parameter `authenticationID` is required when calling `getAuthentication`.");e={method:"GET",path:"/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},getDestination({destinationID:e},r){if(!e)throw new Error("Parameter `destinationID` is required when calling `getDestination`.");e={method:"GET",path:"/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},getEvent({runID:e,eventID:r},t){if(!e)throw new Error("Parameter `runID` is required when calling `getEvent`.");if(!r)throw new Error("Parameter `eventID` is required when calling `getEvent`.");e={method:"GET",path:"/1/runs/{runID}/events/{eventID}".replace("{runID}",encodeURIComponent(e)).replace("{eventID}",encodeURIComponent(r)),queryParameters:{},headers:{}};return m.request(e,t)},getRun({runID:e},r){if(!e)throw new Error("Parameter `runID` is required when calling `getRun`.");e={method:"GET",path:"/1/runs/{runID}".replace("{runID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},getSource({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `getSource`.");e={method:"GET",path:"/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},getTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getTask`.");e={method:"GET",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},getTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getTaskV1`.");e={method:"GET",path:"/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},getTransformation({transformationID:e},r){if(!e)throw new Error("Parameter `transformationID` is required when calling `getTransformation`.");e={method:"GET",path:"/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return m.request(e,r)},listAuthentications({itemsPerPage:e,page:r,type:t,platform:a,sort:i,order:s}={},n=void 0){let o={};void 0!==e&&(o.itemsPerPage=e.toString()),void 0!==r&&(o.page=r.toString()),void 0!==t&&(o.type=t.toString()),void 0!==a&&(o.platform=a.toString()),void 0!==i&&(o.sort=i.toString()),void 0!==s&&(o.order=s.toString());e={method:"GET",path:"/1/authentications",queryParameters:o,headers:{}};return m.request(e,n)},listDestinations({itemsPerPage:e,page:r,type:t,authenticationID:a,transformationID:i,sort:s,order:n}={},o=void 0){let d={};void 0!==e&&(d.itemsPerPage=e.toString()),void 0!==r&&(d.page=r.toString()),void 0!==t&&(d.type=t.toString()),void 0!==a&&(d.authenticationID=a.toString()),void 0!==i&&(d.transformationID=i.toString()),void 0!==s&&(d.sort=s.toString()),void 0!==n&&(d.order=n.toString());e={method:"GET",path:"/1/destinations",queryParameters:d,headers:{}};return m.request(e,o)},listEvents({runID:e,itemsPerPage:r,page:t,status:a,type:i,sort:s,order:n,startDate:o,endDate:d},h){if(!e)throw new Error("Parameter `runID` is required when calling `listEvents`.");let u="/1/runs/{runID}/events".replace("{runID}",encodeURIComponent(e)),c={};void 0!==r&&(c.itemsPerPage=r.toString()),void 0!==t&&(c.page=t.toString()),void 0!==a&&(c.status=a.toString()),void 0!==i&&(c.type=i.toString()),void 0!==s&&(c.sort=s.toString()),void 0!==n&&(c.order=n.toString()),void 0!==o&&(c.startDate=o.toString()),void 0!==d&&(c.endDate=d.toString());e={method:"GET",path:u,queryParameters:c,headers:{}};return m.request(e,h)},listRuns({itemsPerPage:e,page:r,status:t,type:a,taskID:i,sort:s,order:n,startDate:o,endDate:d}={},h=void 0){let u={};void 0!==e&&(u.itemsPerPage=e.toString()),void 0!==r&&(u.page=r.toString()),void 0!==t&&(u.status=t.toString()),void 0!==a&&(u.type=a.toString()),void 0!==i&&(u.taskID=i.toString()),void 0!==s&&(u.sort=s.toString()),void 0!==n&&(u.order=n.toString()),void 0!==o&&(u.startDate=o.toString()),void 0!==d&&(u.endDate=d.toString());e={method:"GET",path:"/1/runs",queryParameters:u,headers:{}};return m.request(e,h)},listSources({itemsPerPage:e,page:r,type:t,authenticationID:a,sort:i,order:s}={},n=void 0){let o={};void 0!==e&&(o.itemsPerPage=e.toString()),void 0!==r&&(o.page=r.toString()),void 0!==t&&(o.type=t.toString()),void 0!==a&&(o.authenticationID=a.toString()),void 0!==i&&(o.sort=i.toString()),void 0!==s&&(o.order=s.toString());e={method:"GET",path:"/1/sources",queryParameters:o,headers:{}};return m.request(e,n)},listTasks({itemsPerPage:e,page:r,action:t,enabled:a,sourceID:i,sourceType:s,destinationID:n,triggerType:o,withEmailNotifications:d,sort:h,order:u}={},c=void 0){let l={};void 0!==e&&(l.itemsPerPage=e.toString()),void 0!==r&&(l.page=r.toString()),void 0!==t&&(l.action=t.toString()),void 0!==a&&(l.enabled=a.toString()),void 0!==i&&(l.sourceID=i.toString()),void 0!==s&&(l.sourceType=s.toString()),void 0!==n&&(l.destinationID=n.toString()),void 0!==o&&(l.triggerType=o.toString()),void 0!==d&&(l.withEmailNotifications=d.toString()),void 0!==h&&(l.sort=h.toString()),void 0!==u&&(l.order=u.toString());e={method:"GET",path:"/2/tasks",queryParameters:l,headers:{}};return m.request(e,c)},listTasksV1({itemsPerPage:e,page:r,action:t,enabled:a,sourceID:i,destinationID:s,triggerType:n,sort:o,order:d}={},h=void 0){let u={};void 0!==e&&(u.itemsPerPage=e.toString()),void 0!==r&&(u.page=r.toString()),void 0!==t&&(u.action=t.toString()),void 0!==a&&(u.enabled=a.toString()),void 0!==i&&(u.sourceID=i.toString()),void 0!==s&&(u.destinationID=s.toString()),void 0!==n&&(u.triggerType=n.toString()),void 0!==o&&(u.sort=o.toString()),void 0!==d&&(u.order=d.toString());e={method:"GET",path:"/1/tasks",queryParameters:u,headers:{}};return m.request(e,h)},listTransformations({itemsPerPage:e,page:r,sort:t,order:a,type:i}={},s=void 0){let n={};void 0!==e&&(n.itemsPerPage=e.toString()),void 0!==r&&(n.page=r.toString()),void 0!==t&&(n.sort=t.toString()),void 0!==a&&(n.order=a.toString()),void 0!==i&&(n.type=i.toString());e={method:"GET",path:"/1/transformations",queryParameters:n,headers:{}};return m.request(e,s)},push({indexName:e,pushTaskPayload:r,watch:t,referenceIndexName:a},i){if(!e)throw new Error("Parameter `indexName` is required when calling `push`.");if(!r)throw new Error("Parameter `pushTaskPayload` is required when calling `push`.");if(!r.action)throw new Error("Parameter `pushTaskPayload.action` is required when calling `push`.");if(!r.records)throw new Error("Parameter `pushTaskPayload.records` is required when calling `push`.");let s="/1/push/{indexName}".replace("{indexName}",encodeURIComponent(e)),n={};void 0!==t&&(n.watch=t.toString()),void 0!==a&&(n.referenceIndexName=a.toString());e={method:"POST",path:s,queryParameters:n,headers:{},data:r};return i={timeouts:{connect:18e4,read:18e4,write:18e4,...i?.timeouts}},m.request(e,i)},pushTask({taskID:e,pushTaskPayload:r,watch:t},a){if(!e)throw new Error("Parameter `taskID` is required when calling `pushTask`.");if(!r)throw new Error("Parameter `pushTaskPayload` is required when calling `pushTask`.");if(!r.action)throw new Error("Parameter `pushTaskPayload.action` is required when calling `pushTask`.");if(!r.records)throw new Error("Parameter `pushTaskPayload.records` is required when calling `pushTask`.");let i="/2/tasks/{taskID}/push".replace("{taskID}",encodeURIComponent(e)),s={};void 0!==t&&(s.watch=t.toString());e={method:"POST",path:i,queryParameters:s,headers:{},data:r};return a={timeouts:{connect:18e4,read:18e4,write:18e4,...a?.timeouts}},m.request(e,a)},replaceTask({taskID:e,taskReplace:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `replaceTask`.");if(!r)throw new Error("Parameter `taskReplace` is required when calling `replaceTask`.");if(!r.destinationID)throw new Error("Parameter `taskReplace.destinationID` is required when calling `replaceTask`.");if(!r.action)throw new Error("Parameter `taskReplace.action` is required when calling `replaceTask`.");e={method:"PUT",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return m.request(e,t)},runSource({sourceID:e,runSourcePayload:r},t){if(!e)throw new Error("Parameter `sourceID` is required when calling `runSource`.");e={method:"POST",path:"/1/sources/{sourceID}/run".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{}};return m.request(e,t)},runTask({taskID:e,runTaskPayload:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `runTask`.");e={method:"POST",path:"/2/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{}};return m.request(e,t)},runTaskV1({taskID:e,runTaskPayload:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `runTaskV1`.");e={method:"POST",path:"/1/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r||{}};return m.request(e,t)},searchAuthentications(e,r){if(!e)throw new Error("Parameter `authenticationSearch` is required when calling `searchAuthentications`.");if(!e.authenticationIDs)throw new Error("Parameter `authenticationSearch.authenticationIDs` is required when calling `searchAuthentications`.");e={method:"POST",path:"/1/authentications/search",queryParameters:{},headers:{},data:e};return m.request(e,r)},searchDestinations(e,r){if(!e)throw new Error("Parameter `destinationSearch` is required when calling `searchDestinations`.");if(!e.destinationIDs)throw new Error("Parameter `destinationSearch.destinationIDs` is required when calling `searchDestinations`.");e={method:"POST",path:"/1/destinations/search",queryParameters:{},headers:{},data:e};return m.request(e,r)},searchSources(e,r){if(!e)throw new Error("Parameter `sourceSearch` is required when calling `searchSources`.");if(!e.sourceIDs)throw new Error("Parameter `sourceSearch.sourceIDs` is required when calling `searchSources`.");e={method:"POST",path:"/1/sources/search",queryParameters:{},headers:{},data:e};return m.request(e,r)},searchTasks(e,r){if(!e)throw new Error("Parameter `taskSearch` is required when calling `searchTasks`.");if(!e.taskIDs)throw new Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasks`.");e={method:"POST",path:"/2/tasks/search",queryParameters:{},headers:{},data:e};return m.request(e,r)},searchTasksV1(e,r){if(!e)throw new Error("Parameter `taskSearch` is required when calling `searchTasksV1`.");if(!e.taskIDs)throw new Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasksV1`.");e={method:"POST",path:"/1/tasks/search",queryParameters:{},headers:{},data:e};return m.request(e,r)},searchTransformations(e,r){if(!e)throw new Error("Parameter `transformationSearch` is required when calling `searchTransformations`.");if(!e.transformationIDs)throw new Error("Parameter `transformationSearch.transformationIDs` is required when calling `searchTransformations`.");e={method:"POST",path:"/1/transformations/search",queryParameters:{},headers:{},data:e};return m.request(e,r)},triggerDockerSourceDiscover({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `triggerDockerSourceDiscover`.");e={method:"POST",path:"/1/sources/{sourceID}/discover".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return r={timeouts:{connect:18e4,read:18e4,write:18e4,...r?.timeouts}},m.request(e,r)},tryTransformation(e,r){if(!e)throw new Error("Parameter `transformationTry` is required when calling `tryTransformation`.");if(!e.sampleRecord)throw new Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformation`.");e={method:"POST",path:"/1/transformations/try",queryParameters:{},headers:{},data:e};return m.request(e,r)},tryTransformationBeforeUpdate({transformationID:e,transformationTry:r},t){if(!e)throw new Error("Parameter `transformationID` is required when calling `tryTransformationBeforeUpdate`.");if(!r)throw new Error("Parameter `transformationTry` is required when calling `tryTransformationBeforeUpdate`.");if(!r.sampleRecord)throw new Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformationBeforeUpdate`.");e={method:"POST",path:"/1/transformations/{transformationID}/try".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return m.request(e,t)},updateAuthentication({authenticationID:e,authenticationUpdate:r},t){if(!e)throw new Error("Parameter `authenticationID` is required when calling `updateAuthentication`.");if(!r)throw new Error("Parameter `authenticationUpdate` is required when calling `updateAuthentication`.");e={method:"PATCH",path:"/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return m.request(e,t)},updateDestination({destinationID:e,destinationUpdate:r},t){if(!e)throw new Error("Parameter `destinationID` is required when calling `updateDestination`.");if(!r)throw new Error("Parameter `destinationUpdate` is required when calling `updateDestination`.");e={method:"PATCH",path:"/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return m.request(e,t)},updateSource({sourceID:e,sourceUpdate:r},t){if(!e)throw new Error("Parameter `sourceID` is required when calling `updateSource`.");if(!r)throw new Error("Parameter `sourceUpdate` is required when calling `updateSource`.");e={method:"PATCH",path:"/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return m.request(e,t)},updateTask({taskID:e,taskUpdate:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `updateTask`.");if(!r)throw new Error("Parameter `taskUpdate` is required when calling `updateTask`.");e={method:"PATCH",path:"/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return m.request(e,t)},updateTaskV1({taskID:e,taskUpdate:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `updateTaskV1`.");if(!r)throw new Error("Parameter `taskUpdate` is required when calling `updateTaskV1`.");e={method:"PATCH",path:"/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return m.request(e,t)},updateTransformation({transformationID:e,transformationCreate:r},t){if(!e)throw new Error("Parameter `transformationID` is required when calling `updateTransformation`.");if(!r)throw new Error("Parameter `transformationCreate` is required when calling `updateTransformation`.");if(!r.name)throw new Error("Parameter `transformationCreate.name` is required when calling `updateTransformation`.");e={method:"PUT",path:"/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return m.request(e,t)},validateSource(e,r=void 0){e={method:"POST",path:"/1/sources/validate",queryParameters:{},headers:{},data:e||{}};return r={timeouts:{connect:18e4,read:18e4,write:18e4,...r?.timeouts}},m.request(e,r)},validateSourceBeforeUpdate({sourceID:e,sourceUpdate:r},t){if(!e)throw new Error("Parameter `sourceID` is required when calling `validateSourceBeforeUpdate`.");if(!r)throw new Error("Parameter `sourceUpdate` is required when calling `validateSourceBeforeUpdate`.");e={method:"POST",path:"/1/sources/{sourceID}/validate".replace("{sourceID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:r};return t={timeouts:{connect:18e4,read:18e4,write:18e4,...t?.timeouts}},m.request(e,t)}}}throw new Error("`region` is required and must be one of the following: "+W.join(", "))}var z="1.39.0";function L(r,t,a){if(!r||"string"!=typeof r)throw new Error("`appId` is missing.");if(t&&"string"==typeof t){var{appId:t,apiKey:r,authMode:s,algoliaAgents:a,...n}=[{appId:r,apiKey:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:z+"-"+r}),c()]}),...a}][0];let e=p(t,r,s),i=q({hosts:[{url:"status.algolia.com",accept:"readWrite",protocol:"https"}],...n,algoliaAgent:w({algoliaAgents:a,client:"Monitoring",version:z}),baseHeaders:{"content-type":"text/plain",...e.headers(),...n.baseHeaders},baseQueryParameters:{...e.queryParameters(),...n.baseQueryParameters}});return{transporter:i,appId:t,apiKey:r,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then(()=>{})},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){s&&"WithinHeaders"!==s?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return i.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return i.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return i.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return i.request(e,a)},getClusterIncidents({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getClusterIncidents`.");e={method:"GET",path:"/1/incidents/{clusters}".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},getClusterStatus({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getClusterStatus`.");e={method:"GET",path:"/1/status/{clusters}".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},getIncidents(e){return i.request({method:"GET",path:"/1/incidents",queryParameters:{},headers:{}},e)},getIndexingTime({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getIndexingTime`.");e={method:"GET",path:"/1/indexing/{clusters}".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},getLatency({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getLatency`.");e={method:"GET",path:"/1/latency/{clusters}".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},getMetrics({metric:e,period:r},t){if(!e)throw new Error("Parameter `metric` is required when calling `getMetrics`.");if(!r)throw new Error("Parameter `period` is required when calling `getMetrics`.");e={method:"GET",path:"/1/infrastructure/{metric}/period/{period}".replace("{metric}",encodeURIComponent(e)).replace("{period}",encodeURIComponent(r)),queryParameters:{},headers:{}};return i.request(e,t)},getReachability({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getReachability`.");e={method:"GET",path:"/1/reachability/{clusters}/probes".replace("{clusters}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(e,r)},getServers(e){return i.request({method:"GET",path:"/1/inventory/servers",queryParameters:{},headers:{}},e)},getStatus(e){return i.request({method:"GET",path:"/1/status",queryParameters:{},headers:{}},e)}}}throw new Error("`apiKey` is missing.")}var M="5.39.0";function V({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...i}){let s=p(e,r,t),n=q({hosts:[{url:e+"-dsn.algolia.net",accept:"read",protocol:"https"},{url:e+".algolia.net",accept:"write",protocol:"https"}].concat(l([{url:e+"-1.algolianet.com",accept:"readWrite",protocol:"https"},{url:e+"-2.algolianet.com",accept:"readWrite",protocol:"https"},{url:e+"-3.algolianet.com",accept:"readWrite",protocol:"https"}])),...i,algoliaAgent:w({algoliaAgents:a,client:"Recommend",version:M}),baseHeaders:{"content-type":"text/plain",...s.headers(),...i.baseHeaders},baseQueryParameters:{...s.queryParameters(),...i.baseQueryParameters}});return{transporter:n,appId:e,apiKey:r,clearCache(){return Promise.all([n.requestsCache.clear(),n.responsesCache.clear()]).then(()=>{})},get _ua(){return n.algoliaAgent.value},addAlgoliaAgent(e,r){n.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?n.baseQueryParameters["x-algolia-api-key"]=e:n.baseHeaders["x-algolia-api-key"]=e},batchRecommendRules({indexName:e,model:r,recommendRule:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `batchRecommendRules`.");if(!r)throw new Error("Parameter `model` is required when calling `batchRecommendRules`.");e={method:"POST",path:"/1/indexes/{indexName}/{model}/recommend/rules/batch".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)),queryParameters:{},headers:{},data:t||{}};return n.request(e,a)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");e={method:"DELETE",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return n.request(e,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");e={method:"GET",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{}};return n.request(e,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");e={method:"POST",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return n.request(e,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");e={method:"PUT",path:"/{path}".replace("{path}",e),queryParameters:r||{},headers:{},data:t||{}};return n.request(e,a)},deleteRecommendRule({indexName:e,model:r,objectID:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteRecommendRule`.");if(!r)throw new Error("Parameter `model` is required when calling `deleteRecommendRule`.");if(!t)throw new Error("Parameter `objectID` is required when calling `deleteRecommendRule`.");e={method:"DELETE",path:"/1/indexes/{indexName}/{model}/recommend/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{objectID}",encodeURIComponent(t)),queryParameters:{},headers:{}};return n.request(e,a)},getRecommendRule({indexName:e,model:r,objectID:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `getRecommendRule`.");if(!r)throw new Error("Parameter `model` is required when calling `getRecommendRule`.");if(!t)throw new Error("Parameter `objectID` is required when calling `getRecommendRule`.");e={method:"GET",path:"/1/indexes/{indexName}/{model}/recommend/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{objectID}",encodeURIComponent(t)),queryParameters:{},headers:{}};return n.request(e,a)},getRecommendStatus({indexName:e,model:r,taskID:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `getRecommendStatus`.");if(!r)throw new Error("Parameter `model` is required when calling `getRecommendStatus`.");if(!t)throw new Error("Parameter `taskID` is required when calling `getRecommendStatus`.");e={method:"GET",path:"/1/indexes/{indexName}/{model}/task/{taskID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{taskID}",encodeURIComponent(t)),queryParameters:{},headers:{}};return n.request(e,a)},getRecommendations(e,r){if(!(e=e&&Array.isArray(e)?{requests:e}:e))throw new Error("Parameter `getRecommendationsParams` is required when calling `getRecommendations`.");if(!e.requests)throw new Error("Parameter `getRecommendationsParams.requests` is required when calling `getRecommendations`.");e={method:"POST",path:"/1/indexes/*/recommendations",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return n.request(e,r)},searchRecommendRules({indexName:e,model:r,searchRecommendRulesParams:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `searchRecommendRules`.");if(!r)throw new Error("Parameter `model` is required when calling `searchRecommendRules`.");e={method:"POST",path:"/1/indexes/{indexName}/{model}/recommend/rules/search".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)),queryParameters:{},headers:{},data:t||{},useReadTransporter:!0,cacheable:!0};return n.request(e,a)}}}function J(e,r,t){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(r&&"string"==typeof r)return V({appId:e,apiKey:r,timeouts:{connect:1e3,read:2e3,write:3e4},logger:P(),requester:d(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:u({caches:[h({key:M+"-"+e}),c()]}),...t});throw new Error("`apiKey` is missing.")}e.abtestingClient=i,e.abtestingV3Client=a,e.algoliasearch=function(r,t,h){if(!r||"string"!=typeof r)throw new Error("`appId` is missing.");if(!t||"string"!=typeof t)throw new Error("`apiKey` is missing.");let e=F(r,t,h),u;if(h?.transformation){if(!h.transformation.region)throw new Error("`region` must be provided when leveraging the transformation pipeline");u=O(r,t,h.transformation.region,h)}return{...e,async saveObjectsWithTransformation({indexName:e,objects:r,waitForTasks:t},a){if(!u)throw new Error("`transformation.region` must be provided at client instantiation before calling this method.");if(h?.transformation?.region)return u.chunkedPush({indexName:e,objects:r,action:"addObject",waitForTasks:t},a);throw new Error("`region` must be provided when leveraging the transformation pipeline")},async partialUpdateObjectsWithTransformation({indexName:e,objects:r,createIfNotExists:t,waitForTasks:a},i){if(!u)throw new Error("`transformation.region` must be provided at client instantiation before calling this method.");if(h?.transformation?.region)return u.chunkedPush({indexName:e,objects:r,action:t?"partialUpdateObject":"partialUpdateObjectNoCreate",waitForTasks:a},i);throw new Error("`region` must be provided when leveraging the transformation pipeline")},async replaceAllObjectsWithTransformation({indexName:e,objects:r,batchSize:t,scopes:a},i){if(!u)throw new Error("`transformation.region` must be provided at client instantiation before calling this method.");if(!h?.transformation?.region)throw new Error("`region` must be provided when leveraging the transformation pipeline");var s=e+"_tmp_"+(Math.floor(1e6*Math.random())+1e5);void 0===a&&(a=["settings","rules","synonyms"]);try{var n=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:s,scope:a}},i),o=await u.chunkedPush({indexName:s,objects:r,waitForTasks:!0,batchSize:t,referenceIndexName:e},i),d=(await this.waitForTask({indexName:s,taskID:n.taskID}),n=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:s,scope:a}},i),await this.waitForTask({indexName:s,taskID:n.taskID}),await this.operationIndex({indexName:s,operationIndexParams:{operation:"move",destination:e}},i));return await this.waitForTask({indexName:s,taskID:d.taskID}),{copyOperationResponse:n,watchResponses:o,moveOperationResponse:d}}catch(e){throw await this.deleteIndex({indexName:s}),e}},get _ua(){return e.transporter.algoliaAgent.value},initAbtesting:e=>i(e.appId||r,e.apiKey||t,e.region,e.options),initAbtestingV3:e=>a(e.appId||r,e.apiKey||t,e.region,e.options),initAnalytics:e=>s(e.appId||r,e.apiKey||t,e.region,e.options),initIngestion:e=>O(e.appId||r,e.apiKey||t,e.region,e.options),initInsights:e=>x(e.appId||r,e.apiKey||t,e.region,e.options),initMonitoring:(e={})=>L(e.appId||r,e.apiKey||t,e.options),initPersonalization:e=>R(e.appId||r,e.apiKey||t,e.region,e.options),initQuerySuggestions:e=>N(e.appId||r,e.apiKey||t,e.region,e.options),initRecommend:(e={})=>J(e.appId||r,e.apiKey||t,e.options)}},e.analyticsClient=s,e.apiClientVersion=U,e.ingestionClient=O,e.insightsClient=x,e.isOnDemandTrigger=function(e){return"onDemand"===e.type},e.isScheduleTrigger=function(e){return"schedule"===e.type},e.isSubscriptionTrigger=function(e){return"subscription"===e.type},e.monitoringClient=L,e.personalizationClient=R,e.querySuggestionsClient=N,e.recommendClient=J,e.searchClient=F});